#pragma once

namespace san::cmake {

[[maybe_unused]] static std::string compile_opts()	{ return "${COMPILE_OPTS_STR}"; }
[[maybe_unused]] static std::string build_type()	{ return "${CMAKE_BUILD_TYPE}"; }

[[maybe_unused]] static std::string compiler_id() {

// https://clang.llvm.org/docs/LanguageExtensions.html#builtin-macros
#if defined( __clang__ ) // Clang also defines __GNUG__ (why?). So i'll check for '__clang__' first.
	return __VERSION__;

// https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html
#elif defined( __GNUG__ )
	return "GNU C++ " + std::to_string( __GNUC__ ) + '.' + std::to_string( __GNUC_MINOR__ ) + '.' + std::to_string( __GNUC_PATCHLEVEL__ );

// https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170
#elif defined( _MSC_VER )
	//return "MSVC " + std::to_string( _MSC_VER );
	size_t a = _MSC_FULL_VER;
	size_t c = a % 100'000; a /= 100'000;
	size_t b = a %     100; a /=     100;

	char ver[64];
	sprintf( ver, "%zu.%zu.%zu", a, b, c );
	return "Microsoft C/C++ " + std::string( ver );

#else // other trash...
	return "${CMAKE_CXX_COMPILER_ID}";
#endif
}

} // namespace san::cmake
